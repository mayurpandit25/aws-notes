                                                                   **AWS lambda**

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.it is a serverless computing.
2.it is compute service which we can use to run our code without provisioning and managing the servers.
3.with aws lambda,you can run your code for virtually any type of application or backed service all with zero administration.
4.With AWS Lambda, you only pay for the compute time that you consume, which makes it a cost-effective solution for building scalable applications.
5.Additionally, AWS Lambda supports a variety of programming languages, making it easy for developers to write their code in the language they are most comfortable
  with.
6.aws lambda run our code on a high availability compute infrastructure.
7.aws lambda execute our code when needed and scales automatically from a few request per day to thousands per request.
8.we can pay only when our code run.no charge can apply when the code is not running.
9.all you need to do only supply your code to lambda in the form of one or more lambda function.
10.lambda supports the languages like node JS,python,go,rubby,c#,java,powershell,provided Runtime API (custom runtime).
11.AWS Lambda is often used to build serverless applications, which are applications that run in the cloud without requiring the developer to manage the underlying 
   infrastructure.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**How lambda works** 
    1.first you upload your code to lambda in one or more function.
    2.then lambda excutes the code 
    3.after the code is envoked,lambda automatically take care of provisioning and managing required servers.
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

 **difference between aws lambda and aws EC2**
   
                aws lambda                                                                 aws EC2
   1.it is platform as a service model.                                        1.it is a infrastructure as a service model
   2.it supports only limited languagres like java,python                      2.it has no environment so we can run the code on any
     ruby,powershell,c#,node JS,go,runtine API                                   languages.
   3.in lambda,write the code and push the code into AWS                       3.firstly you have to choose the OS and then install the
     lambda.                                                                     software required and then push your code into EC2
   4.you cannot log into compute instance choose customized                    4.you can select variety of OS,instance types,networks and
     os or language platform.                                                    security patches,etc
   5.pay only when our code runs mean pay only for compute                     5.5.pay-per-second bill
     services that we consume. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                       OR
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

 AWS lambda is a compute service that lets you run the code without provisioning or managing servers.
 With AWS lambda, you can run code for virtually any type of application or backend service- all with zero administration.
 AWS lambda manages all the administration it manages:
         Provisioning and capacity of the compute fleet that offers a balance of memory, CPU, network and other resources.
         Server and O.S maintenance
         High availability and automatic scaling
         Monitoring fleet health
         Applying security patches
         Deploying your code
         Monitoring and logging your lambda functions.
         AWS lambda runs your code on a high-availability compute infrastructure.
 AWS lambda runs your code on a high availability compute infrastructure.
 AWS lambda executes your code only when needed and scales automatically form a few requests per day to thousands per seconds.
 You pay only for the compute time, you consume no charge when your code is not running.
 All you need to do is supply your code in the form of one or more lambda functions to AWS lambda, in one of the languages that AWS supports (currently Node.js, 
  java,powershell, C#, Ruby, Python and Go) and the service can run the code on your behalf.
 Typically the lifecycle for an AWS lambda based application includes authoring code, deploying code to AWS lambda and then monitoring and troubleshooting.
 This is in exchange for flexibility, which means you cannot log into compute instances or customize the operating system of language runtime.
 If you do want to manage your own compute, you can use EC2 of Elastic Beanstalk. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Important Terms Used in Lambda**
a. Function: 
       1.a function is a resource that you can invoke to run your code in AWS lambda.
       2.A function has code that processes events and a runtime that passes request and responses between lambda and the function code.

b. Runtime: 
       1.lambda runtimes allows functions in different languages to run in the same base execution environment. 
       2.The runtime sits in between the lambda service and your function code relying invocation events, context information and responses between the two.

c. Event: 
       1.it is a JSON formatted document that contains data for a function to process.

d. Event Source/ Trigger: 
       1.an AWS service such as Amazon SNS or a custom service that triggers your function and executes its logic.

e. Downstream Resource: 
       1.an AWS service, such as Dynamo DB tables or S3 buckets that your lambda function call once it is triggered.

f. Concurrency: 
       1.number of request that your function is serving in any given time. 
                                                                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**When Lambda Triggers**
      You can use AWS lambda to run your code in response to :
         Events such as changes to data in an Amazon S3 or an Amazon Dynamo DB table.
         To run your code in response to HTTP request using Amazon API gateway.
         With the capabilities you can use lambda to easily build data processing triggers for AWS services like Amazon S3, and Amazon Dynamo DB process streaming 
          data stored in kinesis or create your own backend that operates at AWS scale, performance and security.

Example of S3:
    The user create an object in a bucket.
    Amazon S3 invokes your lambda functions using the permission provided by the execution role.
    Amazon S3 knows which lambda function to invoke based on the event source mapping that is stored in the bucket notification configuration.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**AWS Lambda Function Configuration**
      A lambda function consists of code and any associated dependencies.
      In addition a lambda function also has configuration information associated with it. 
      Initially you specify the configuration information when you create a lambda function.
      Lambda provides an API for you to update some of the configuration data.


**Lambda function configuration information includes the following key elements**
      Compute resources that you need you only specify the amount of memory you want to allocate from your lambda function.
      AWS lambda allocates CPU power proportional to the memory by using the same ratio as a general purpose Amazon EC2 instance type, such as an M3 type.
      You can update the configuration and request additional memory in 64mb increments from 128mb to 3008mb.
      Functions larger than 1536mb are allocated multiple CPU threads. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Maximum Execution Timeout**
     You pay for the AWS resources that are used to run your lambda function.
     To prevent your lambda function from running indefinitely, you specify a timeout.
     When the specified timeout is reached, AWS lambda terminates your lambda function.
     Default is 3sec and maximum is 9000sec (15min).
     IAM ROLE: this is the role that AWS lambda assume when it executes the lambda function on your behalf.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**AWS Lambda Function- Services it can access**
 Lambda function can access:
         AWS services and non-AWS services.
         AWS services running in AWS VPC (e.g: redshift, elastic cache, RDS instance)
         Non-AWS services running on instances in an AWS VPC.
         AWS lambda run your function code securely with in a VPC by default.
         However to enable your lambda function to access resources inside your private VPC you must provide additional VPC specific configuration information that
          includes VPC subnet ID and Security group IDs

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Different way to invoke Lambda Function**
    1. Synchronous invoke (push)
    2. Asynchronous invoke (event)
    3. Poll-based invoke (pull based)


1. Synchronous Invoke:
    Synchronous invoke are the most straight forward way to invoke your lambda function. In this model your functions execute immediately when you perform the lambda 
     invoke API call.
    Invocation flag specifies a value of “request-response”.
    You wait for the function to process the event and return a response.

Here is a list of services that invoke lambda function synchronously:
      Elastic Load Balancer
      Amazon Cognito
      Cloud front
      API Gateway
      Amazon Lex
      Kinesis data firehose


2. Asynchronous Invoke:
    For asynchronous invocation, lambda places the event in a queue and returns a success response without additional information.
    Lambda queues the event for processing and returns a response immediately.
    You can configure lambda to send an invocation record to another service like SQS, SNS, lambda and eventbridge.

Here is a list of services that invoke lambda function asynchronously:
     Amazon S3
     Amazon SNS
     SES
     Cloud watch logs
     Cloud watch events
     AWS code commit
     AWS config


3. Poll-Based Invoke:
       The invocation model is designed to allow you to integrate with AWS stream and queue based service with no code or server management lambda will poll the 
       following service on your behalf, retrieve records and invoke your function.

The following are supported service:
       Amazon Kinesis
       Amazon SQS
       Amazon Dynamo DB Streams

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**PRACTICAL**

**S3 TRIGGER WITH LAMBDA**

1.create a role
    1.type----------aws service
    2.use case------lambda
    3.policy--------dynamoDBfullAccess
    4.role name-----role-for-lambda


2.create a lambda function
    1.author from scratch
    2.name---------lambda
    3.runtime------python3.7
    4.advanced setting---role---existing role---(role-for-lambda)


3.create a s3 bucket
    1.my-s2-bucket
    2.give them a public access


4.go to lambda
    1.paste the code on function

        import boto3
        from uuid import uuid4
        def lambda_handler(event, context):
            s3 = boto3.client("s3")
            dynamodb = boto3.resource('dynamodb')
            for record in event['Records']:
                bucket_name = record['s3']['bucket']['name']
                object_key = record['s3']['object']['key']
                size = record['s3']['object'].get('size', -1)
                event_name = record ['eventName']
                event_time = record['eventTime']
                dynamoTable = dynamodb.Table('newtable')
                dynamoTable.put_item(
                Item={'unique': str(uuid4()), 'Bucket': bucket_name, 'Object': object_key,'Size': size, 'Event': event_name, 'EventTime': event_time})

    2.and deploy the code


5.then trigger the s3 bucket
    1.click on trigger
    2.search---s3
    3.bucket---my-s2-bucket
    4.event----all-object-create-event
    5.enable trigger
    6.create a trigger


6.go to dynamoDB
    1.create a table
          1.table-name----newtable
          2.partion key---unique
          3.create 


7.go to s3 bucket
    1.click on bucket
    2.add objects in the buckets


8.go to dynamodb
    1.click on tables
    2.click on newtable
    3.click on explore item

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**creating snapshots with python script**

1.create a instance in mumbai region and in singapore region

2.create a role
      1.role----------aws service
      2.use case------lambda
      3.policy--------Ec2-full-access
      4.role-name-----role-for-lambda

3.create a lambda function in lambda
      1.author from scratch
      2.function name-----my-function
      3.runtime-----------python3.7
      4.role------select existing role---role-for-lambda
      5.create a function

4.on the function
      1.paste the code

import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # Get list of regions
    regions = ec2.describe_regions().get('Regions',[] )

    # Iterate over regions
    for region in regions:
        print("Checking region %s " % region['RegionName'])
        reg=region['RegionName']

        # Connect to region
        ec2 = boto3.client('ec2', region_name=reg)
    
        # Get all in-use volumes in all regions  
        result = ec2.describe_volumes( Filters=[{'Name': 'status', 'Values': ['in-use']}])
        
        for volume in result['Volumes']:
            print("Backing up %s in %s" % (volume['VolumeId'], volume['AvailabilityZone']))
        
            # Create snapshot
            result = ec2.create_snapshot(VolumeId=volume['VolumeId'],Description='Created by Lambda backup function ebs-snapshots')
        
            # Get snapshot resource 
            ec2resource = boto3.resource('ec2', region_name=reg)
            snapshot = ec2resource.Snapshot(result['SnapshotId'])
        
            volumename = 'N/A'
        
            # Find name tag for volume if it exists
            if 'Tags' in volume:
                for tags in volume['Tags']:
                    if tags["Key"] == 'Name':
                        volumename = tags["Value"]
        
            # Add volume name to snapshot for easier identification
            snapshot.create_tags(Tags=[{'Key': 'Name','Value': volumename}])

      2.deploying the code
      3.go to configuration and edit
              1.memory----500MB
              2.desc.-----config
              3.timeout------0 to 4m
              4.save
      4.test the code
              1.create a event
              2.name-----snapshot
              3.save

5.go to mumbai region click on snapshot and check

6.go to singapore region click on snapshot and check

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


 